{"ast":null,"code":"import { createAction, handleActions } from \"redux-actions\";\nimport produce from \"immer\";\nimport { insertTodo, updateTodo, deleteTodo } from \"../lib/api/todoApi\";\nimport * as todoApi from \"../lib/api/todoApi\";\nimport createRequestThunk from \"../lib/createRequestThunk\";\nimport axios from \"axios\";\nimport { useEffect } from \"react\"; //액션타입 정의하기\n\nconst CHANGE_INPUT = \"todos/CHANGE_INPUT\"; //인풋 값을 변경\n\nconst INSERT = \"todos/INSERT\"; //todo 등록\n\nconst INSERT_SUCCESS = \"todos/INSERT_SUCCESS\";\nconst TOGGLE = \"todos/TOGGLE\"; //todo 체크\n\nconst REMOVE = \"todos/REMOVE\"; //todo제거\n\nconst EDIT = \"todos/Edit\"; //todo수정\n\nconst GET_TODOS = \"todos/GET_TODOS\";\nconst GET_TODOS_SUCCESS = \"todos/GET_TODOS_SUCCESS\"; //액션 생성함수 만들기\n\nexport const changeInput = createAction(CHANGE_INPUT, input => input); //let id = 1;\n// export const insert = createAction(INSERT, (text) => ({\n//   id: \"\",\n//   text,\n//   checked: false,\n// }));\n\nexport const insert = createRequestThunk(INSERT, todoApi.insertTodo);\nexport const toggle = createAction(TOGGLE, id => id);\nexport const remove = createAction(REMOVE, id => id);\nexport const edit = createAction(EDIT, id => id);\nexport const getTodos = createRequestThunk(GET_TODOS, todoApi.getTodos);\nconst initialState = {\n  input: \"\",\n  todos: []\n}; //리듀서함수 만들기 (immer사용)\n\nconst todos = handleActions({\n  [CHANGE_INPUT]: (state, {\n    payload: input\n  }) => produce(state, draft => {\n    draft.input = input;\n  }),\n  [INSERT_SUCCESS]: (state, action) => ({ ...state,\n    todos: state.todos.concat(action.payload)\n  }),\n  [TOGGLE]: (state, {\n    payload: id\n  }) => produce(state, draft => {\n    const todo = draft.todos.find(todo => todo.id === id);\n    todo.checked = !todo.checked;\n    updateTodo(todo);\n  }),\n  [REMOVE]: (state, {\n    payload: id\n  }) => produce(state, draft => {\n    const index = draft.todos.findIndex(todo => todo.id === id);\n\n    if (window.confirm(\"해당 ToDo를 삭제하시겠습니까?\")) {\n      draft.todos.splice(index, 1);\n      deleteTodo(id);\n    }\n  }),\n  [EDIT]: (state, {\n    payload: id\n  }) => produce(state, draft => {\n    const todo = draft.todos.find(todo => todo.id === id); //let newtext = newText;\n\n    let newtext = window.prompt(\"ToDo 수정\", todo.text);\n    if (newtext == \"\") alert(\"공백으로 수정할 수 없습니다.\");else if (newtext.length > 100) alert(\"100자 이하로 작성해주세요.\");else if (newtext != null) todo.text = newtext;\n    updateTodo(todo);\n  }),\n  [GET_TODOS_SUCCESS]: (state, action) => ({ ...state,\n    todos: action.payload\n  })\n}, initialState);\nexport default todos;","map":{"version":3,"sources":["/home/jihyeon/React/todo/frontend/src/modules/todos.js"],"names":["createAction","handleActions","produce","insertTodo","updateTodo","deleteTodo","todoApi","createRequestThunk","axios","useEffect","CHANGE_INPUT","INSERT","INSERT_SUCCESS","TOGGLE","REMOVE","EDIT","GET_TODOS","GET_TODOS_SUCCESS","changeInput","input","insert","toggle","id","remove","edit","getTodos","initialState","todos","state","payload","draft","action","concat","todo","find","checked","index","findIndex","window","confirm","splice","newtext","prompt","text","alert","length"],"mappings":"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","sourcesContent":["import { createAction, handleActions } from \"redux-actions\";\nimport produce from \"immer\";\nimport { insertTodo, updateTodo, deleteTodo } from \"../lib/api/todoApi\";\nimport * as todoApi from \"../lib/api/todoApi\";\nimport createRequestThunk from \"../lib/createRequestThunk\";\nimport axios from \"axios\";\nimport { useEffect } from \"react\";\n\n//액션타입 정의하기\nconst CHANGE_INPUT = \"todos/CHANGE_INPUT\"; //인풋 값을 변경\n\nconst INSERT = \"todos/INSERT\"; //todo 등록\nconst INSERT_SUCCESS = \"todos/INSERT_SUCCESS\";\n\nconst TOGGLE = \"todos/TOGGLE\"; //todo 체크\nconst REMOVE = \"todos/REMOVE\"; //todo제거\nconst EDIT = \"todos/Edit\"; //todo수정\n\nconst GET_TODOS = \"todos/GET_TODOS\";\nconst GET_TODOS_SUCCESS = \"todos/GET_TODOS_SUCCESS\";\n\n//액션 생성함수 만들기\nexport const changeInput = createAction(CHANGE_INPUT, (input) => input);\n\n//let id = 1;\n// export const insert = createAction(INSERT, (text) => ({\n//   id: \"\",\n//   text,\n//   checked: false,\n// }));\n\nexport const insert = createRequestThunk(INSERT, todoApi.insertTodo);\n\nexport const toggle = createAction(TOGGLE, (id) => id);\n\nexport const remove = createAction(REMOVE, (id) => id);\n\nexport const edit = createAction(EDIT, (id) => id);\n\nexport const getTodos = createRequestThunk(GET_TODOS, todoApi.getTodos);\n\nconst initialState = {\n  input: \"\",\n  todos: [],\n};\n\n//리듀서함수 만들기 (immer사용)\nconst todos = handleActions(\n  {\n    [CHANGE_INPUT]: (state, { payload: input }) =>\n      produce(state, (draft) => {\n        draft.input = input;\n      }),\n    [INSERT_SUCCESS]: (state, action) => ({\n      ...state,\n      todos: state.todos.concat(action.payload),\n    }),\n    [TOGGLE]: (state, { payload: id }) =>\n      produce(state, (draft) => {\n        const todo = draft.todos.find((todo) => todo.id === id);\n        todo.checked = !todo.checked;\n        updateTodo(todo);\n      }),\n    [REMOVE]: (state, { payload: id }) =>\n      produce(state, (draft) => {\n        const index = draft.todos.findIndex((todo) => todo.id === id);\n        if (window.confirm(\"해당 ToDo를 삭제하시겠습니까?\")) {\n          draft.todos.splice(index, 1);\n          deleteTodo(id);\n        }\n      }),\n    [EDIT]: (state, { payload: id }) =>\n      produce(state, (draft) => {\n        const todo = draft.todos.find((todo) => todo.id === id);\n\n        //let newtext = newText;\n        let newtext = window.prompt(\"ToDo 수정\", todo.text);\n        if (newtext == \"\") alert(\"공백으로 수정할 수 없습니다.\");\n        else if (newtext.length > 100) alert(\"100자 이하로 작성해주세요.\");\n        else if (newtext != null) todo.text = newtext;\n        updateTodo(todo);\n      }),\n    [GET_TODOS_SUCCESS]: (state, action) => ({\n      ...state,\n      todos: action.payload,\n    }),\n  },\n  initialState\n);\n\nexport default todos;\n"]},"metadata":{},"sourceType":"module"}