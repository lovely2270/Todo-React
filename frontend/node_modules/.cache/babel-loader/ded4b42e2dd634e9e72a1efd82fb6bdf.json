{"ast":null,"code":"import * as api from \"../lib/api\"; //import createRequestThunk from \"../lib/createRequestThunk\";\n\nimport { handleActions } from \"redux-actions\";\nconst GET_TODOS = \"apiRequest/GET_TODOS\";\nconst GET_TODOS_SUCCESS = \"apiRequest/GET_TODOS_SUCCESS\"; // const INSERT_TODO = \"apiRequest/INSERT_TODO\";\n// const INSERT_TODO_SUCCESS = \"apiRequest/INSERT_TODO_SUCCESS\";\n// const UPDATE_TODO = \"apiRequest/UPDATE_TODO\";\n// const UPDATE_TODO_SUCCESS = \"apiRequest/UPDATE_TODO_SUCCESS\";\n// const DELETE_TODO = \"apiRequest/DELETE_TODO\";\n// const DELETE_TODO_SUCCESS = \"apiRequest/DELETE_TODO_SUCCESS\";\n//export const getTodos = createRequestThunk(GET_TODOS, api.getTodos);\n\nexport const getTodos = () => async dispatch => {\n  dispatch({\n    type: GET_TODOS\n  });\n\n  try {\n    const response = await request(params);\n    dispatch({\n      type: GET_TODOS_SUCCESS,\n      payload: response.data\n    });\n  } catch (e) {\n    dispatch({\n      type: GET_TODOS_FAILURE,\n      payload: e,\n      error: true\n    });\n    throw e;\n  }\n}; // export const insertTodo = createRequestThunk(INSERT_TODO, api.insertTodos);\n// export const updateTodo = createRequestThunk(UPDATE_TODO, api.updateTodos);\n// export const deleteTodo = createRequestThunk(DELETE_TODO, api.deleteTodos);\n\nconst initialState = {};\nconst apiRequest = handleActions({\n  [GET_TODOS_SUCCESS]: (state, action) => ({ ...state,\n    todos: action.payload\n  })\n}, initialState);\nexport default apiRequest;","map":{"version":3,"sources":["/home/jihyeon/React/todo/frontend/src/modules/apiRequest.js"],"names":["api","handleActions","GET_TODOS","GET_TODOS_SUCCESS","getTodos","dispatch","type","response","request","params","payload","data","e","GET_TODOS_FAILURE","error","initialState","apiRequest","state","action","todos"],"mappings":"AAAA,OAAO,KAAKA,GAAZ,MAAqB,YAArB,C,CACA;;AACA,SAASC,aAAT,QAA8B,eAA9B;AAEA,MAAMC,SAAS,GAAG,sBAAlB;AACA,MAAMC,iBAAiB,GAAG,8BAA1B,C,CAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAM,MAAOC,QAAP,IAAoB;AAChDA,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEJ;AAAR,GAAD,CAAR;;AACA,MAAI;AACF,UAAMK,QAAQ,GAAG,MAAMC,OAAO,CAACC,MAAD,CAA9B;AACAJ,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEH,iBADC;AAEPO,MAAAA,OAAO,EAAEH,QAAQ,CAACI;AAFX,KAAD,CAAR;AAID,GAND,CAME,OAAOC,CAAP,EAAU;AACVP,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEO,iBADC;AAEPH,MAAAA,OAAO,EAAEE,CAFF;AAGPE,MAAAA,KAAK,EAAE;AAHA,KAAD,CAAR;AAKA,UAAMF,CAAN;AACD;AACF,CAhBM,C,CAiBP;AACA;AACA;;AAEA,MAAMG,YAAY,GAAG,EAArB;AAEA,MAAMC,UAAU,GAAGf,aAAa,CAC9B;AACE,GAACE,iBAAD,GAAqB,CAACc,KAAD,EAAQC,MAAR,MAAoB,EACvC,GAAGD,KADoC;AAEvCE,IAAAA,KAAK,EAAED,MAAM,CAACR;AAFyB,GAApB;AADvB,CAD8B,EAO9BK,YAP8B,CAAhC;AAUA,eAAeC,UAAf","sourcesContent":["import * as api from \"../lib/api\";\n//import createRequestThunk from \"../lib/createRequestThunk\";\nimport { handleActions } from \"redux-actions\";\n\nconst GET_TODOS = \"apiRequest/GET_TODOS\";\nconst GET_TODOS_SUCCESS = \"apiRequest/GET_TODOS_SUCCESS\";\n\n// const INSERT_TODO = \"apiRequest/INSERT_TODO\";\n// const INSERT_TODO_SUCCESS = \"apiRequest/INSERT_TODO_SUCCESS\";\n\n// const UPDATE_TODO = \"apiRequest/UPDATE_TODO\";\n// const UPDATE_TODO_SUCCESS = \"apiRequest/UPDATE_TODO_SUCCESS\";\n\n// const DELETE_TODO = \"apiRequest/DELETE_TODO\";\n// const DELETE_TODO_SUCCESS = \"apiRequest/DELETE_TODO_SUCCESS\";\n\n//export const getTodos = createRequestThunk(GET_TODOS, api.getTodos);\nexport const getTodos = () => async (dispatch) => {\n  dispatch({ type: GET_TODOS });\n  try {\n    const response = await request(params);\n    dispatch({\n      type: GET_TODOS_SUCCESS,\n      payload: response.data,\n    });\n  } catch (e) {\n    dispatch({\n      type: GET_TODOS_FAILURE,\n      payload: e,\n      error: true,\n    });\n    throw e;\n  }\n};\n// export const insertTodo = createRequestThunk(INSERT_TODO, api.insertTodos);\n// export const updateTodo = createRequestThunk(UPDATE_TODO, api.updateTodos);\n// export const deleteTodo = createRequestThunk(DELETE_TODO, api.deleteTodos);\n\nconst initialState = {};\n\nconst apiRequest = handleActions(\n  {\n    [GET_TODOS_SUCCESS]: (state, action) => ({\n      ...state,\n      todos: action.payload,\n    }),\n  },\n  initialState\n);\n\nexport default apiRequest;\n"]},"metadata":{},"sourceType":"module"}