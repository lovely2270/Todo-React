{"ast":null,"code":"import { createAction, handleActions } from \"redux-actions\";\nimport produce from \"immer\";\nimport api, { insertTodos, updateTodos, deleteTodos, getTodos } from \"../lib/api\"; //import apiRequest, { getTodos, insertTodo, updateTodo } from \"./apiRequest\";\n//액션타입 정의하기\n\nconst CHANGE_INPUT = \"todos/CHANGE_INPUT\"; //인풋 값을 변경\n\nconst INSERT = \"todos/INSERT\"; //todo 등록\n\nconst TOGGLE = \"todos/TOGGLE\"; //todo 체크\n\nconst REMOVE = \"todos/REMOVE\"; //todo제거\n\nconst EDIT = \"todos/Edit\"; //todo수정\n//액션 생성함수 만들기\n\nexport const changeInput = createAction(CHANGE_INPUT, input => input);\nlet id = 1;\nexport const insert = createAction(INSERT, text => ({\n  id: id++,\n  text,\n  checked: false\n}));\nexport const toggle = createAction(TOGGLE, id => id);\nexport const remove = createAction(REMOVE, id => id);\nexport const edit = createAction(EDIT, id => id); //초기상태\n\nconst gettodos = [{\n  userId: 1,\n  id: 1,\n  text: \"delectus aut autem\",\n  completed: false\n}, {\n  userId: 1,\n  id: 2,\n  text: \"quis ut nam facilis et officia qui\",\n  completed: false\n}];\nconst aa = getTodos();\nconst initialState = {\n  input: \"\",\n  todos: gettodos\n}; //리듀서함수 만들기 (immer사용)\n\nconst todos = handleActions({\n  [CHANGE_INPUT]: (state, {\n    payload: input\n  }) => produce(state, draft => {\n    draft.input = input;\n  }),\n  [INSERT]: (state, {\n    payload: todo\n  }) => produce(state, draft => {\n    draft.todos.push(todo);\n    insertTodos(todo);\n  }),\n  [TOGGLE]: (state, {\n    payload: id\n  }) => produce(state, draft => {\n    const todo = draft.todos.find(todo => todo.id === id);\n    todo.checked = !todo.checked;\n    updateTodos(todo);\n  }),\n  [REMOVE]: (state, {\n    payload: id\n  }) => produce(state, draft => {\n    const index = draft.todos.findIndex(todo => todo.id === id);\n    draft.todos.splice(index, 1);\n    deleteTodos(id);\n  }),\n  [EDIT]: (state, {\n    payload: id\n  }) => produce(state, draft => {\n    const todo = draft.todos.find(todo => todo.id === id);\n    let newtext = window.prompt(\"ToDo 수정\", todo.text);\n    if (newtext != null) todo.text = newtext;\n    updateTodos(todo);\n  })\n}, initialState);\nexport default todos;","map":{"version":3,"sources":["/home/jihyeon/React/todo/frontend/src/modules/todos.js"],"names":["createAction","handleActions","produce","api","insertTodos","updateTodos","deleteTodos","getTodos","CHANGE_INPUT","INSERT","TOGGLE","REMOVE","EDIT","changeInput","input","id","insert","text","checked","toggle","remove","edit","gettodos","userId","completed","aa","initialState","todos","state","payload","draft","todo","push","find","index","findIndex","splice","newtext","window","prompt"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,eAA5C;AACA,OAAOC,OAAP,MAAoB,OAApB;AACA,OAAOC,GAAP,IACEC,WADF,EAEEC,WAFF,EAGEC,WAHF,EAIEC,QAJF,QAKO,YALP,C,CAMA;AAEA;;AACA,MAAMC,YAAY,GAAG,oBAArB,C,CAA2C;;AAC3C,MAAMC,MAAM,GAAG,cAAf,C,CAA+B;;AAC/B,MAAMC,MAAM,GAAG,cAAf,C,CAA+B;;AAC/B,MAAMC,MAAM,GAAG,cAAf,C,CAA+B;;AAC/B,MAAMC,IAAI,GAAG,YAAb,C,CAA2B;AAE3B;;AACA,OAAO,MAAMC,WAAW,GAAGb,YAAY,CAACQ,YAAD,EAAgBM,KAAD,IAAWA,KAA1B,CAAhC;AAEP,IAAIC,EAAE,GAAG,CAAT;AACA,OAAO,MAAMC,MAAM,GAAGhB,YAAY,CAACS,MAAD,EAAUQ,IAAD,KAAW;AACpDF,EAAAA,EAAE,EAAEA,EAAE,EAD8C;AAEpDE,EAAAA,IAFoD;AAGpDC,EAAAA,OAAO,EAAE;AAH2C,CAAX,CAAT,CAA3B;AAMP,OAAO,MAAMC,MAAM,GAAGnB,YAAY,CAACU,MAAD,EAAUK,EAAD,IAAQA,EAAjB,CAA3B;AAEP,OAAO,MAAMK,MAAM,GAAGpB,YAAY,CAACW,MAAD,EAAUI,EAAD,IAAQA,EAAjB,CAA3B;AAEP,OAAO,MAAMM,IAAI,GAAGrB,YAAY,CAACY,IAAD,EAAQG,EAAD,IAAQA,EAAf,CAAzB,C,CAEP;;AACA,MAAMO,QAAQ,GAAG,CACf;AACEC,EAAAA,MAAM,EAAE,CADV;AAEER,EAAAA,EAAE,EAAE,CAFN;AAGEE,EAAAA,IAAI,EAAE,oBAHR;AAIEO,EAAAA,SAAS,EAAE;AAJb,CADe,EAOf;AACED,EAAAA,MAAM,EAAE,CADV;AAEER,EAAAA,EAAE,EAAE,CAFN;AAGEE,EAAAA,IAAI,EAAE,oCAHR;AAIEO,EAAAA,SAAS,EAAE;AAJb,CAPe,CAAjB;AAcA,MAAMC,EAAE,GAAGlB,QAAQ,EAAnB;AACA,MAAMmB,YAAY,GAAG;AACnBZ,EAAAA,KAAK,EAAE,EADY;AAEnBa,EAAAA,KAAK,EAAEL;AAFY,CAArB,C,CAKA;;AACA,MAAMK,KAAK,GAAG1B,aAAa,CACzB;AACE,GAACO,YAAD,GAAgB,CAACoB,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEf;AAAX,GAAR,KACdZ,OAAO,CAAC0B,KAAD,EAASE,KAAD,IAAW;AACxBA,IAAAA,KAAK,CAAChB,KAAN,GAAcA,KAAd;AACD,GAFM,CAFX;AAKE,GAACL,MAAD,GAAU,CAACmB,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEE;AAAX,GAAR,KACR7B,OAAO,CAAC0B,KAAD,EAASE,KAAD,IAAW;AACxBA,IAAAA,KAAK,CAACH,KAAN,CAAYK,IAAZ,CAAiBD,IAAjB;AACA3B,IAAAA,WAAW,CAAC2B,IAAD,CAAX;AACD,GAHM,CANX;AAUE,GAACrB,MAAD,GAAU,CAACkB,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEd;AAAX,GAAR,KACRb,OAAO,CAAC0B,KAAD,EAASE,KAAD,IAAW;AACxB,UAAMC,IAAI,GAAGD,KAAK,CAACH,KAAN,CAAYM,IAAZ,CAAkBF,IAAD,IAAUA,IAAI,CAAChB,EAAL,KAAYA,EAAvC,CAAb;AACAgB,IAAAA,IAAI,CAACb,OAAL,GAAe,CAACa,IAAI,CAACb,OAArB;AACAb,IAAAA,WAAW,CAAC0B,IAAD,CAAX;AACD,GAJM,CAXX;AAgBE,GAACpB,MAAD,GAAU,CAACiB,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEd;AAAX,GAAR,KACRb,OAAO,CAAC0B,KAAD,EAASE,KAAD,IAAW;AACxB,UAAMI,KAAK,GAAGJ,KAAK,CAACH,KAAN,CAAYQ,SAAZ,CAAuBJ,IAAD,IAAUA,IAAI,CAAChB,EAAL,KAAYA,EAA5C,CAAd;AACAe,IAAAA,KAAK,CAACH,KAAN,CAAYS,MAAZ,CAAmBF,KAAnB,EAA0B,CAA1B;AACA5B,IAAAA,WAAW,CAACS,EAAD,CAAX;AACD,GAJM,CAjBX;AAsBE,GAACH,IAAD,GAAQ,CAACgB,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEd;AAAX,GAAR,KACNb,OAAO,CAAC0B,KAAD,EAASE,KAAD,IAAW;AACxB,UAAMC,IAAI,GAAGD,KAAK,CAACH,KAAN,CAAYM,IAAZ,CAAkBF,IAAD,IAAUA,IAAI,CAAChB,EAAL,KAAYA,EAAvC,CAAb;AACA,QAAIsB,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAc,SAAd,EAAyBR,IAAI,CAACd,IAA9B,CAAd;AACA,QAAIoB,OAAO,IAAI,IAAf,EAAqBN,IAAI,CAACd,IAAL,GAAYoB,OAAZ;AACrBhC,IAAAA,WAAW,CAAC0B,IAAD,CAAX;AACD,GALM;AAvBX,CADyB,EA+BzBL,YA/ByB,CAA3B;AAkCA,eAAeC,KAAf","sourcesContent":["import { createAction, handleActions } from \"redux-actions\";\nimport produce from \"immer\";\nimport api, {\n  insertTodos,\n  updateTodos,\n  deleteTodos,\n  getTodos,\n} from \"../lib/api\";\n//import apiRequest, { getTodos, insertTodo, updateTodo } from \"./apiRequest\";\n\n//액션타입 정의하기\nconst CHANGE_INPUT = \"todos/CHANGE_INPUT\"; //인풋 값을 변경\nconst INSERT = \"todos/INSERT\"; //todo 등록\nconst TOGGLE = \"todos/TOGGLE\"; //todo 체크\nconst REMOVE = \"todos/REMOVE\"; //todo제거\nconst EDIT = \"todos/Edit\"; //todo수정\n\n//액션 생성함수 만들기\nexport const changeInput = createAction(CHANGE_INPUT, (input) => input);\n\nlet id = 1;\nexport const insert = createAction(INSERT, (text) => ({\n  id: id++,\n  text,\n  checked: false,\n}));\n\nexport const toggle = createAction(TOGGLE, (id) => id);\n\nexport const remove = createAction(REMOVE, (id) => id);\n\nexport const edit = createAction(EDIT, (id) => id);\n\n//초기상태\nconst gettodos = [\n  {\n    userId: 1,\n    id: 1,\n    text: \"delectus aut autem\",\n    completed: false,\n  },\n  {\n    userId: 1,\n    id: 2,\n    text: \"quis ut nam facilis et officia qui\",\n    completed: false,\n  },\n];\nconst aa = getTodos();\nconst initialState = {\n  input: \"\",\n  todos: gettodos,\n};\n\n//리듀서함수 만들기 (immer사용)\nconst todos = handleActions(\n  {\n    [CHANGE_INPUT]: (state, { payload: input }) =>\n      produce(state, (draft) => {\n        draft.input = input;\n      }),\n    [INSERT]: (state, { payload: todo }) =>\n      produce(state, (draft) => {\n        draft.todos.push(todo);\n        insertTodos(todo);\n      }),\n    [TOGGLE]: (state, { payload: id }) =>\n      produce(state, (draft) => {\n        const todo = draft.todos.find((todo) => todo.id === id);\n        todo.checked = !todo.checked;\n        updateTodos(todo);\n      }),\n    [REMOVE]: (state, { payload: id }) =>\n      produce(state, (draft) => {\n        const index = draft.todos.findIndex((todo) => todo.id === id);\n        draft.todos.splice(index, 1);\n        deleteTodos(id);\n      }),\n    [EDIT]: (state, { payload: id }) =>\n      produce(state, (draft) => {\n        const todo = draft.todos.find((todo) => todo.id === id);\n        let newtext = window.prompt(\"ToDo 수정\", todo.text);\n        if (newtext != null) todo.text = newtext;\n        updateTodos(todo);\n      }),\n  },\n  initialState\n);\n\nexport default todos;\n"]},"metadata":{},"sourceType":"module"}