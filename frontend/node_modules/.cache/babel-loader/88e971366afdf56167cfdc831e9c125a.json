{"ast":null,"code":"import { createAction, handleActions } from \"redux-actions\";\nimport produce from \"immer\";\nimport { updateTodo, deleteTodo } from \"../lib/api/todoApi\";\nimport * as todoApi from \"../lib/api/todoApi\";\nimport createRequestThunk from \"../lib/createRequestThunk\"; //액션타입 정의하기\n\nconst CHANGE_INPUT = \"todos/CHANGE_INPUT\"; //인풋 값을 변경\n\nconst INSERT = \"todos/INSERT\"; //todo 등록\n\nconst INSERT_SUCCESS = \"todos/INSERT_SUCCESS\";\nconst TOGGLE = \"todos/TOGGLE\"; //todo 체크\n\nconst REMOVE = \"todos/REMOVE\"; //todo제거\n\nconst EDIT = \"todos/Edit\"; //todo수정\n\nconst SETTING_DATE = \"todos/SETTING_DATE\";\nconst SEARCH = \"todos/SEARCH\";\nconst SEARCH_SUCCESS = \"todos/SEARCH_SUCCESS\";\nconst GET_TODOS = \"todos/GET_TODOS\";\nconst GET_TODOS_SUCCESS = \"todos/GET_TODOS_SUCCESS\";\nconst REMOVE_CHECKED = \"todos/REMOVE_CHECKED\";\nconst REMOVE_CHECKED_SUCCESS = \"todos/REMOVE_CHECKED_SUCCESS\"; //액션 생성함수 만들기\n\nexport const changeInput = createAction(CHANGE_INPUT, input => input);\nexport const insert = createRequestThunk(INSERT, todoApi.insertTodo);\nexport const toggle = createAction(TOGGLE, id => id);\nexport const remove = createAction(REMOVE, id => id);\nexport const edit = createAction(EDIT, id => id);\nexport const settingDate = createAction(SETTING_DATE, (id, date) => ({\n  id,\n  date\n}));\nexport const search = createRequestThunk(SEARCH, todoApi.getSearchTodo);\nexport const getTodos = createRequestThunk(GET_TODOS, todoApi.getTodos);\nexport const removeChecked = createRequestThunk(REMOVE_CHECKED, todoApi.deleteCheckedTodo); //초기값\n\nconst initialState = {\n  input: \"\",\n  todos: []\n}; //리듀서함수 만들기 (immer사용)\n\nconst todos = handleActions({\n  [CHANGE_INPUT]: (state, {\n    payload: input\n  }) => produce(state, draft => {\n    draft.input = input;\n  }),\n  [INSERT_SUCCESS]: (state, action) => ({ ...state,\n    todos: action.payload\n  }),\n  [TOGGLE]: (state, {\n    payload: id\n  }) => produce(state, draft => {\n    const todo = draft.todos.find(todo => todo.id === id);\n    todo.checked = !todo.checked;\n    updateTodo(todo);\n  }),\n  [REMOVE]: (state, {\n    payload: id\n  }) => produce(state, draft => {\n    const index = draft.todos.findIndex(todo => todo.id === id);\n\n    if (window.confirm(\"해당 ToDo를 삭제하시겠습니까?\")) {\n      draft.todos.splice(index, 1);\n      deleteTodo(id);\n    }\n  }),\n  [EDIT]: (state, {\n    payload: id\n  }) => produce(state, draft => {\n    const todo = draft.todos.find(todo => todo.id === id);\n    let newtext = window.prompt(\"ToDo 수정\", todo.text);\n    if (newtext === \"\") alert(\"공백으로 수정할 수 없습니다.\");else if (newtext.length > 100) alert(\"100자 이하로 작성해주세요.\");else if (newtext != null) todo.text = newtext;\n    updateTodo(todo);\n  }),\n  [SETTING_DATE]: (state, {\n    payload: {\n      id,\n      date\n    }\n  }) => produce(state, draft => {\n    const todo = draft.todos.find(todo => todo.id === id);\n    todo.dday = date;\n    updateTodo(todo);\n  }),\n  [SEARCH_SUCCESS]: (state, action) => ({ ...state,\n    todos: action.payload\n  }),\n  [GET_TODOS_SUCCESS]: (state, action) => ({ ...state,\n    todos: action.payload\n  }),\n  [REMOVE_CHECKED_SUCCESS]: (state, action) => ({ ...state,\n    todos: action.payload\n  })\n}, initialState);\nexport default todos;","map":{"version":3,"sources":["/home/jihyeon/React/todo/frontend/src/modules/todos.js"],"names":["createAction","handleActions","produce","updateTodo","deleteTodo","todoApi","createRequestThunk","CHANGE_INPUT","INSERT","INSERT_SUCCESS","TOGGLE","REMOVE","EDIT","SETTING_DATE","SEARCH","SEARCH_SUCCESS","GET_TODOS","GET_TODOS_SUCCESS","REMOVE_CHECKED","REMOVE_CHECKED_SUCCESS","changeInput","input","insert","insertTodo","toggle","id","remove","edit","settingDate","date","search","getSearchTodo","getTodos","removeChecked","deleteCheckedTodo","initialState","todos","state","payload","draft","action","todo","find","checked","index","findIndex","window","confirm","splice","newtext","prompt","text","alert","length","dday"],"mappings":"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","sourcesContent":["import { createAction, handleActions } from \"redux-actions\";\nimport produce from \"immer\";\nimport { updateTodo, deleteTodo } from \"../lib/api/todoApi\";\nimport * as todoApi from \"../lib/api/todoApi\";\nimport createRequestThunk from \"../lib/createRequestThunk\";\n\n//액션타입 정의하기\nconst CHANGE_INPUT = \"todos/CHANGE_INPUT\"; //인풋 값을 변경\n\nconst INSERT = \"todos/INSERT\"; //todo 등록\nconst INSERT_SUCCESS = \"todos/INSERT_SUCCESS\";\n\nconst TOGGLE = \"todos/TOGGLE\"; //todo 체크\nconst REMOVE = \"todos/REMOVE\"; //todo제거\nconst EDIT = \"todos/Edit\"; //todo수정\nconst SETTING_DATE = \"todos/SETTING_DATE\";\n\nconst SEARCH = \"todos/SEARCH\";\nconst SEARCH_SUCCESS = \"todos/SEARCH_SUCCESS\";\n\nconst GET_TODOS = \"todos/GET_TODOS\";\nconst GET_TODOS_SUCCESS = \"todos/GET_TODOS_SUCCESS\";\n\nconst REMOVE_CHECKED = \"todos/REMOVE_CHECKED\";\nconst REMOVE_CHECKED_SUCCESS = \"todos/REMOVE_CHECKED_SUCCESS\";\n\n//액션 생성함수 만들기\nexport const changeInput = createAction(CHANGE_INPUT, (input) => input);\n\nexport const insert = createRequestThunk(INSERT, todoApi.insertTodo);\n\nexport const toggle = createAction(TOGGLE, (id) => id);\n\nexport const remove = createAction(REMOVE, (id) => id);\n\nexport const edit = createAction(EDIT, (id) => id);\n\nexport const settingDate = createAction(SETTING_DATE, (id, date) => ({\n  id,\n  date,\n}));\n\nexport const search = createRequestThunk(SEARCH, todoApi.getSearchTodo);\n\nexport const getTodos = createRequestThunk(GET_TODOS, todoApi.getTodos);\n\nexport const removeChecked = createRequestThunk(\n  REMOVE_CHECKED,\n  todoApi.deleteCheckedTodo\n);\n\n//초기값\nconst initialState = {\n  input: \"\",\n  todos: [],\n};\n\n//리듀서함수 만들기 (immer사용)\nconst todos = handleActions(\n  {\n    [CHANGE_INPUT]: (state, { payload: input }) =>\n      produce(state, (draft) => {\n        draft.input = input;\n      }),\n    [INSERT_SUCCESS]: (state, action) => ({\n      ...state,\n      todos: action.payload,\n    }),\n    [TOGGLE]: (state, { payload: id }) =>\n      produce(state, (draft) => {\n        const todo = draft.todos.find((todo) => todo.id === id);\n        todo.checked = !todo.checked;\n        updateTodo(todo);\n      }),\n    [REMOVE]: (state, { payload: id }) =>\n      produce(state, (draft) => {\n        const index = draft.todos.findIndex((todo) => todo.id === id);\n        if (window.confirm(\"해당 ToDo를 삭제하시겠습니까?\")) {\n          draft.todos.splice(index, 1);\n          deleteTodo(id);\n        }\n      }),\n    [EDIT]: (state, { payload: id }) =>\n      produce(state, (draft) => {\n        const todo = draft.todos.find((todo) => todo.id === id);\n\n        let newtext = window.prompt(\"ToDo 수정\", todo.text);\n        if (newtext === \"\") alert(\"공백으로 수정할 수 없습니다.\");\n        else if (newtext.length > 100) alert(\"100자 이하로 작성해주세요.\");\n        else if (newtext != null) todo.text = newtext;\n        updateTodo(todo);\n      }),\n    [SETTING_DATE]: (state, { payload: { id, date } }) =>\n      produce(state, (draft) => {\n        const todo = draft.todos.find((todo) => todo.id === id);\n\n        todo.dday = date;\n\n        updateTodo(todo);\n      }),\n    [SEARCH_SUCCESS]: (state, action) => ({\n      ...state,\n      todos: action.payload,\n    }),\n    [GET_TODOS_SUCCESS]: (state, action) => ({\n      ...state,\n      todos: action.payload,\n    }),\n    [REMOVE_CHECKED_SUCCESS]: (state, action) => ({\n      ...state,\n      todos: action.payload,\n    }),\n  },\n  initialState\n);\n\nexport default todos;\n"]},"metadata":{},"sourceType":"module"}