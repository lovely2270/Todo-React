{"ast":null,"code":"import { createAction, handleActions } from \"redux-actions\";\nimport produce from \"immer\";\nimport { insertTodo, updateTodo, deleteTodo, awaitGetTodos } from \"../lib/api\";\nimport * as api from \"../lib/api\";\nimport createRequestThunk from \"../lib/createRequestThunk\";\nconst {\n  useEffect\n} = React; //액션타입 정의하기\n\nconst CHANGE_INPUT = \"todos/CHANGE_INPUT\"; //인풋 값을 변경\n\nconst INSERT = \"todos/INSERT\"; //todo 등록\n\nconst TOGGLE = \"todos/TOGGLE\"; //todo 체크\n\nconst REMOVE = \"todos/REMOVE\"; //todo제거\n\nconst EDIT = \"todos/Edit\"; //todo수정\n\nconst GET_TODOS = \"todos/GET_TODOS\";\nconst GET_TODOS_SUCCESS = \"todos/GET_TODOS_SUCCESS\"; //액션 생성함수 만들기\n\nexport const changeInput = createAction(CHANGE_INPUT, input => input); //let id = 1;\n\nexport const insert = createAction(INSERT, text => ({\n  id: 156854645,\n  text,\n  checked: false\n}));\nexport const toggle = createAction(TOGGLE, id => id);\nexport const remove = createAction(REMOVE, id => id);\nexport const edit = createAction(EDIT, id => id);\nexport const getTodos = createRequestThunk(GET_TODOS, api.getTodos);\nconst initialState = {\n  input: \"\",\n  todos: []\n}; //리듀서함수 만들기 (immer사용)\n\nconst todos = handleActions({\n  [CHANGE_INPUT]: (state, {\n    payload: input\n  }) => produce(state, draft => {\n    draft.input = input;\n  }),\n  [INSERT]: (state, {\n    payload: todo\n  }) => produce(state, draft => {\n    //insertTodo(todo);\n    //draft.todos.push(todo);\n    //\n    insertTodo(todo).then(function (response) {\n      console.log(todo);\n      useEffect(() => {\n        const fn = async () => {\n          try {\n            await getTodos();\n          } catch (e) {\n            console.log(e);\n          }\n        };\n\n        fn();\n      }, [getTodos]);\n    }).catch(function (error) {\n      console.log(error);\n    });\n  }),\n  [TOGGLE]: (state, {\n    payload: id\n  }) => produce(state, draft => {\n    const todo = draft.todos.find(todo => todo.id === id);\n    todo.checked = !todo.checked;\n    updateTodo(todo); // .then(function (response) {\n    //   todo.checked = !todo.checked;\n    // })\n    // .catch(function (error) {\n    //   console.log(error);\n    // });\n  }),\n  [REMOVE]: (state, {\n    payload: id\n  }) => produce(state, draft => {\n    //const index = draft.todos.findIndex((todo) => todo.id === id);\n    // draft.todos.splice(index, 1);\n    deleteTodo(id).then(function (response) {\n      //draft.todos.splice(index, 1);\n      console.log(id);\n    }).catch(function (error) {\n      console.log(error);\n    });\n  }),\n  [EDIT]: (state, {\n    payload: id\n  }) => produce(state, draft => {\n    const todo = draft.todos.find(todo => todo.id === id);\n    let newtext = window.prompt(\"ToDo 수정\", todo.text);\n    if (newtext != null) todo.text = newtext; // if (newtext != null) {\n\n    updateTodo(todo); //     .then(function (response) {\n    //       // if (newtext != null)\n    //       todo.text = newtext;\n    //     })\n    //     .catch(function (error) {\n    //       console.log(error);\n    //     });\n    // }\n  }),\n  [GET_TODOS_SUCCESS]: (state, action) => ({ ...state,\n    todos: action.payload\n  })\n}, initialState);\nexport default todos;","map":{"version":3,"sources":["/home/jihyeon/React/todo/frontend/src/modules/todos.js"],"names":["createAction","handleActions","produce","insertTodo","updateTodo","deleteTodo","awaitGetTodos","api","createRequestThunk","useEffect","React","CHANGE_INPUT","INSERT","TOGGLE","REMOVE","EDIT","GET_TODOS","GET_TODOS_SUCCESS","changeInput","input","insert","text","id","checked","toggle","remove","edit","getTodos","initialState","todos","state","payload","draft","todo","then","response","console","log","fn","e","catch","error","find","newtext","window","prompt","action"],"mappings":"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","sourcesContent":["import { createAction, handleActions } from \"redux-actions\";\nimport produce from \"immer\";\nimport { insertTodo, updateTodo, deleteTodo, awaitGetTodos } from \"../lib/api\";\nimport * as api from \"../lib/api\";\nimport createRequestThunk from \"../lib/createRequestThunk\";\n\nconst { useEffect } = React;\n\n//액션타입 정의하기\nconst CHANGE_INPUT = \"todos/CHANGE_INPUT\"; //인풋 값을 변경\nconst INSERT = \"todos/INSERT\"; //todo 등록\nconst TOGGLE = \"todos/TOGGLE\"; //todo 체크\nconst REMOVE = \"todos/REMOVE\"; //todo제거\nconst EDIT = \"todos/Edit\"; //todo수정\n\nconst GET_TODOS = \"todos/GET_TODOS\";\nconst GET_TODOS_SUCCESS = \"todos/GET_TODOS_SUCCESS\";\n\n//액션 생성함수 만들기\nexport const changeInput = createAction(CHANGE_INPUT, (input) => input);\n\n//let id = 1;\nexport const insert = createAction(INSERT, (text) => ({\n  id: 156854645,\n  text,\n  checked: false,\n}));\n\nexport const toggle = createAction(TOGGLE, (id) => id);\n\nexport const remove = createAction(REMOVE, (id) => id);\n\nexport const edit = createAction(EDIT, (id) => id);\n\nexport const getTodos = createRequestThunk(GET_TODOS, api.getTodos);\n\nconst initialState = {\n  input: \"\",\n  todos: [],\n};\n\n//리듀서함수 만들기 (immer사용)\nconst todos = handleActions(\n  {\n    [CHANGE_INPUT]: (state, { payload: input }) =>\n      produce(state, (draft) => {\n        draft.input = input;\n      }),\n    [INSERT]: (state, { payload: todo }) =>\n      produce(state, (draft) => {\n        //insertTodo(todo);\n        //draft.todos.push(todo);\n        //\n        insertTodo(todo)\n          .then(function (response) {\n            console.log(todo);\n            useEffect(() => {\n              const fn = async () => {\n                try {\n                  await getTodos();\n                } catch (e) {\n                  console.log(e);\n                }\n              };\n              fn();\n            }, [getTodos]);\n          })\n          .catch(function (error) {\n            console.log(error);\n          });\n      }),\n    [TOGGLE]: (state, { payload: id }) =>\n      produce(state, (draft) => {\n        const todo = draft.todos.find((todo) => todo.id === id);\n        todo.checked = !todo.checked;\n        updateTodo(todo);\n        // .then(function (response) {\n        //   todo.checked = !todo.checked;\n        // })\n        // .catch(function (error) {\n        //   console.log(error);\n        // });\n      }),\n    [REMOVE]: (state, { payload: id }) =>\n      produce(state, (draft) => {\n        //const index = draft.todos.findIndex((todo) => todo.id === id);\n        // draft.todos.splice(index, 1);\n        deleteTodo(id)\n          .then(function (response) {\n            //draft.todos.splice(index, 1);\n            console.log(id);\n          })\n          .catch(function (error) {\n            console.log(error);\n          });\n      }),\n    [EDIT]: (state, { payload: id }) =>\n      produce(state, (draft) => {\n        const todo = draft.todos.find((todo) => todo.id === id);\n        let newtext = window.prompt(\"ToDo 수정\", todo.text);\n        if (newtext != null) todo.text = newtext;\n        // if (newtext != null) {\n        updateTodo(todo);\n        //     .then(function (response) {\n        //       // if (newtext != null)\n        //       todo.text = newtext;\n        //     })\n        //     .catch(function (error) {\n        //       console.log(error);\n        //     });\n        // }\n      }),\n    [GET_TODOS_SUCCESS]: (state, action) => ({\n      ...state,\n      todos: action.payload,\n    }),\n  },\n  initialState\n);\n\nexport default todos;\n"]},"metadata":{},"sourceType":"module"}