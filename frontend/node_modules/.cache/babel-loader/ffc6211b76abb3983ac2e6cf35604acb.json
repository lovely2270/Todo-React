{"ast":null,"code":"import { createAction, handleActions } from \"redux-actions\";\nimport produce from \"immer\";\nimport api, { getTodos, insertTodos } from \"../lib/api\";\nimport apiRequest from \"./apiRequest\"; //액션타입 정의하기\n\nconst CHANGE_INPUT = \"todos/CHANGE_INPUT\"; //인풋 값을 변경\n\nconst INSERT = \"todos/INSERT\"; //todo 등록\n\nconst TOGGLE = \"todos/TOGGLE\"; //todo 체크\n\nconst REMOVE = \"todos/REMOVE\"; //todo제거\n\nconst EDIT = \"todos/Edit\"; //todo수정\n//액션 생성함수 만들기\n\nexport const changeInput = createAction(CHANGE_INPUT, input => input);\nlet id = 1;\nexport const insert = createAction(INSERT, text => ({\n  id: id++,\n  text,\n  checked: false\n}));\nexport const toggle = createAction(TOGGLE, id => id);\nexport const remove = createAction(REMOVE, id => id);\nexport const edit = createAction(EDIT, id => id); //초기상태\n\nconst initialState = {\n  input: \"\",\n  todos: []\n}; //리듀서함수 만들기 (immer사용)\n\nconst todos = handleActions({\n  [CHANGE_INPUT]: (state, {\n    payload: input\n  }) => produce(state, draft => {\n    draft.input = input;\n  }),\n  [INSERT]: (state, {\n    payload: todo\n  }) => produce(state, draft => {\n    //draft.todos.push(todo);\n    insertTodos(todo).then(res => {\n      draft.todos.push(todo);\n    });\n  }),\n  [TOGGLE]: (state, {\n    payload: id\n  }) => produce(state, draft => {\n    const todo = draft.todos.find(todo => todo.id === id);\n    todo.checked = !todo.checked;\n    apiRequest.updateTodos(todo).then(res);\n  }),\n  [REMOVE]: (state, {\n    payload: id\n  }) => produce(state, draft => {\n    const index = draft.todos.findIndex(todo => todo.id === id);\n    draft.todos.splice(index, 1);\n  }),\n  [EDIT]: (state, {\n    payload: id\n  }) => produce(state, draft => {\n    const todo = draft.todos.find(todo => todo.id === id);\n    let newtext = window.prompt(\"ToDo 수정\", todo.text);\n    if (newtext != null) todo.text = newtext;\n  })\n}, initialState);\nexport default todos;","map":{"version":3,"sources":["/home/jihyeon/React/todo/frontend/src/modules/todos.js"],"names":["createAction","handleActions","produce","api","getTodos","insertTodos","apiRequest","CHANGE_INPUT","INSERT","TOGGLE","REMOVE","EDIT","changeInput","input","id","insert","text","checked","toggle","remove","edit","initialState","todos","state","payload","draft","todo","then","res","push","find","updateTodos","index","findIndex","splice","newtext","window","prompt"],"mappings":"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","sourcesContent":["import { createAction, handleActions } from \"redux-actions\";\nimport produce from \"immer\";\nimport api, { getTodos, insertTodos } from \"../lib/api\";\nimport apiRequest from \"./apiRequest\";\n\n//액션타입 정의하기\nconst CHANGE_INPUT = \"todos/CHANGE_INPUT\"; //인풋 값을 변경\nconst INSERT = \"todos/INSERT\"; //todo 등록\nconst TOGGLE = \"todos/TOGGLE\"; //todo 체크\nconst REMOVE = \"todos/REMOVE\"; //todo제거\nconst EDIT = \"todos/Edit\"; //todo수정\n\n//액션 생성함수 만들기\nexport const changeInput = createAction(CHANGE_INPUT, (input) => input);\n\nlet id = 1;\nexport const insert = createAction(INSERT, (text) => ({\n  id: id++,\n  text,\n  checked: false,\n}));\n\nexport const toggle = createAction(TOGGLE, (id) => id);\n\nexport const remove = createAction(REMOVE, (id) => id);\n\nexport const edit = createAction(EDIT, (id) => id);\n\n//초기상태\nconst initialState = {\n  input: \"\",\n  todos: [],\n};\n\n//리듀서함수 만들기 (immer사용)\nconst todos = handleActions(\n  {\n    [CHANGE_INPUT]: (state, { payload: input }) =>\n      produce(state, (draft) => {\n        draft.input = input;\n      }),\n    [INSERT]: (state, { payload: todo }) =>\n      produce(state, (draft) => {\n        //draft.todos.push(todo);\n        insertTodos(todo).then((res) => {\n          draft.todos.push(todo);\n        });\n      }),\n    [TOGGLE]: (state, { payload: id }) =>\n      produce(state, (draft) => {\n        const todo = draft.todos.find((todo) => todo.id === id);\n        todo.checked = !todo.checked;\n        apiRequest.updateTodos(todo).then(res);\n      }),\n    [REMOVE]: (state, { payload: id }) =>\n      produce(state, (draft) => {\n        const index = draft.todos.findIndex((todo) => todo.id === id);\n        draft.todos.splice(index, 1);\n      }),\n    [EDIT]: (state, { payload: id }) =>\n      produce(state, (draft) => {\n        const todo = draft.todos.find((todo) => todo.id === id);\n        let newtext = window.prompt(\"ToDo 수정\", todo.text);\n        if (newtext != null) todo.text = newtext;\n      }),\n  },\n  initialState\n);\n\nexport default todos;\n"]},"metadata":{},"sourceType":"module"}