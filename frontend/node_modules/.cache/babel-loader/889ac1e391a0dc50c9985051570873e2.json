{"ast":null,"code":"import { createAction } from \"redux-actions\"; //액션타입 정의하기\n\nconst CHANGE_INPUT = \"todos/CHANGE_INPUT\"; //인풋 값을 변경\n\nconst INSERT = \"todos/INSERT\"; //todo 등록\n\nconst TOGGLE = \"todos/TOGGLE\"; //todo 체크\n\nconst REMOVE = \"todos/REMOVE\"; //todo제거\n\nconst EDIT = \"todos/Edit\"; //todo수정\n//액션 생성함수 만들기\n\nexport const changeInput = createAction(CHANGE_INPUT, input => input);\nlet id = 1;\nexport const insert = createAction(INSERT, text => ({\n  id: id++,\n  text,\n  checked: false\n}));\nexport const toggle = createAction(TOGGLE, id => id);\nexport const remove = createAction(REMOVE, id => id);\nexport const edit = createAction(EDIT, id => id); //초기상태\n\nconst initialState = {\n  input: \"\",\n  todos: [{}]\n}; //리듀서함수 만들기\n\nfunction todos(state = initialState, action) {\n  switch (action.type) {\n    case CHANGE_INPUT:\n      return { ...state,\n        input: action.input\n      };\n\n    case INSERT:\n      return { ...state,\n        todos: state.todos.concat(action.todo)\n      };\n\n    case TOGGLE:\n      return { ...state,\n        todos: state.todos.map(todo => todo.id === action.id ? { ...todo,\n          done: !todo.done\n        } : todo)\n      };\n\n    case REMOVE:\n      return { ...state,\n        todos: state.todos.filter(todo => todo.id !== action.id)\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport default todos;","map":{"version":3,"sources":["/home/jihyeon/React/todo/frontend/src/modules/todos.js"],"names":["createAction","CHANGE_INPUT","INSERT","TOGGLE","REMOVE","EDIT","changeInput","input","id","insert","text","checked","toggle","remove","edit","initialState","todos","state","action","type","concat","todo","map","done","filter"],"mappings":"AAAA,SAASA,YAAT,QAA6B,eAA7B,C,CAEA;;AACA,MAAMC,YAAY,GAAG,oBAArB,C,CAA2C;;AAC3C,MAAMC,MAAM,GAAG,cAAf,C,CAA+B;;AAC/B,MAAMC,MAAM,GAAG,cAAf,C,CAA+B;;AAC/B,MAAMC,MAAM,GAAG,cAAf,C,CAA+B;;AAC/B,MAAMC,IAAI,GAAG,YAAb,C,CAA2B;AAE3B;;AACA,OAAO,MAAMC,WAAW,GAAGN,YAAY,CAACC,YAAD,EAAgBM,KAAD,IAAWA,KAA1B,CAAhC;AAEP,IAAIC,EAAE,GAAG,CAAT;AACA,OAAO,MAAMC,MAAM,GAAGT,YAAY,CAACE,MAAD,EAAUQ,IAAD,KAAW;AACpDF,EAAAA,EAAE,EAAEA,EAAE,EAD8C;AAEpDE,EAAAA,IAFoD;AAGpDC,EAAAA,OAAO,EAAE;AAH2C,CAAX,CAAT,CAA3B;AAMP,OAAO,MAAMC,MAAM,GAAGZ,YAAY,CAACG,MAAD,EAAUK,EAAD,IAAQA,EAAjB,CAA3B;AAEP,OAAO,MAAMK,MAAM,GAAGb,YAAY,CAACI,MAAD,EAAUI,EAAD,IAAQA,EAAjB,CAA3B;AAEP,OAAO,MAAMM,IAAI,GAAGd,YAAY,CAACK,IAAD,EAAQG,EAAD,IAAQA,EAAf,CAAzB,C,CAEP;;AACA,MAAMO,YAAY,GAAG;AACnBR,EAAAA,KAAK,EAAE,EADY;AAEnBS,EAAAA,KAAK,EAAE,CAAC,EAAD;AAFY,CAArB,C,CAKA;;AACA,SAASA,KAAT,CAAeC,KAAK,GAAGF,YAAvB,EAAqCG,MAArC,EAA6C;AAC3C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKlB,YAAL;AACE,aAAO,EACL,GAAGgB,KADE;AAELV,QAAAA,KAAK,EAAEW,MAAM,CAACX;AAFT,OAAP;;AAIF,SAAKL,MAAL;AACE,aAAO,EACL,GAAGe,KADE;AAELD,QAAAA,KAAK,EAAEC,KAAK,CAACD,KAAN,CAAYI,MAAZ,CAAmBF,MAAM,CAACG,IAA1B;AAFF,OAAP;;AAIF,SAAKlB,MAAL;AACE,aAAO,EACL,GAAGc,KADE;AAELD,QAAAA,KAAK,EAAEC,KAAK,CAACD,KAAN,CAAYM,GAAZ,CAAiBD,IAAD,IACrBA,IAAI,CAACb,EAAL,KAAYU,MAAM,CAACV,EAAnB,GACI,EACE,GAAGa,IADL;AAEEE,UAAAA,IAAI,EAAE,CAACF,IAAI,CAACE;AAFd,SADJ,GAKIF,IANC;AAFF,OAAP;;AAWF,SAAKjB,MAAL;AACE,aAAO,EACL,GAAGa,KADE;AAELD,QAAAA,KAAK,EAAEC,KAAK,CAACD,KAAN,CAAYQ,MAAZ,CAAoBH,IAAD,IAAUA,IAAI,CAACb,EAAL,KAAYU,MAAM,CAACV,EAAhD;AAFF,OAAP;;AAKF;AACE,aAAOS,KAAP;AA9BJ;AAgCD;;AAED,eAAeD,KAAf","sourcesContent":["import { createAction } from \"redux-actions\";\n\n//액션타입 정의하기\nconst CHANGE_INPUT = \"todos/CHANGE_INPUT\"; //인풋 값을 변경\nconst INSERT = \"todos/INSERT\"; //todo 등록\nconst TOGGLE = \"todos/TOGGLE\"; //todo 체크\nconst REMOVE = \"todos/REMOVE\"; //todo제거\nconst EDIT = \"todos/Edit\"; //todo수정\n\n//액션 생성함수 만들기\nexport const changeInput = createAction(CHANGE_INPUT, (input) => input);\n\nlet id = 1;\nexport const insert = createAction(INSERT, (text) => ({\n  id: id++,\n  text,\n  checked: false,\n}));\n\nexport const toggle = createAction(TOGGLE, (id) => id);\n\nexport const remove = createAction(REMOVE, (id) => id);\n\nexport const edit = createAction(EDIT, (id) => id);\n\n//초기상태\nconst initialState = {\n  input: \"\",\n  todos: [{}],\n};\n\n//리듀서함수 만들기\nfunction todos(state = initialState, action) {\n  switch (action.type) {\n    case CHANGE_INPUT:\n      return {\n        ...state,\n        input: action.input,\n      };\n    case INSERT:\n      return {\n        ...state,\n        todos: state.todos.concat(action.todo),\n      };\n    case TOGGLE:\n      return {\n        ...state,\n        todos: state.todos.map((todo) =>\n          todo.id === action.id\n            ? {\n                ...todo,\n                done: !todo.done,\n              }\n            : todo\n        ),\n      };\n    case REMOVE:\n      return {\n        ...state,\n        todos: state.todos.filter((todo) => todo.id !== action.id),\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport default todos;\n"]},"metadata":{},"sourceType":"module"}